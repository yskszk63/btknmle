name: build

on: push

jobs:
  check:
    runs-on: ubuntu-latest
    env:
      RUST_TEST_THREADS: 1
    steps:
    - uses: actions/checkout@v2

    - run: rustup update

    - name: Cache cargo registry
      uses: actions/cache@v1
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v1
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo bin
      uses: actions/cache@v1
      with:
        path: ~/.cargo/bin
        key: ${{ runner.os }}-cargo-bin-${{ hashFiles('**/Cargo.lock') }}

    #- name: Cache cargo build
    #  uses: actions/cache@v1
    #  with:
    #    path: target
    #    key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Install kcov dependencies
      run: sudo apt install -y cmake curl g++ jq python binutils-dev libcurl4-openssl-dev zlib1g-dev libdw-dev libiberty-dev

    - name: Install cargo-kcov
      run: "[ -f ~/.cargo/bin/cargo-kcov ] || cargo install cargo-kcov"

    - name: Install kcov
      run: "[ -f ~/.cargo/bin/kcov] || (cargo kcov --print-install-kcov-sh | sh)"

    - run: sudo apt update && sudo apt install -y libudev-dev libinput-dev

    - name: Check format
      run: cargo fmt -- --check

    - name: Build
      run: cargo build --verbose

    - name: Run kcov
      run: cargo kcov -v --all --no-fail-fast

    - uses: codecov/codecov-action@v1

  deploy-image:
    runs-on: ubuntu-latest
    needs: check
    if: github.ref == 'refs/heads/master'
    env:
      PLATFORM: linux/amd64,linux/arm/v7
      DOCKER_REPO: yskszk63/btknmle

    steps:
    - uses: actions/checkout@v2

    # work around for `Value too large for defined data type;`
    - name: Setup btrfs volume driver
      run: |
        sudo systemctl stop docker.service
        sudo fallocate -l10GB /mnt/docker.img
        sudo mkfs.btrfs /mnt/docker.img
        sudo mount -t btrfs /mnt/docker.img /var/lib/docker
        echo '{"storage-driver":"btrfs"}' | sudo tee /etc/docker/daemon.json > /dev/null
        sudo systemctl start docker.service

    - name: Setup buildx
      run: |
        docker run --rm --privileged "$BINFMT_IMAGE"
        curl -L "$BUILDX_URL" -o ~/.docker/cli-plugins/docker-buildx --create-dirs -sS
        chmod a+x ~/.docker/cli-plugins/docker-buildx
        docker buildx create --use --platform "$PLATFORM"
        docker buildx inspect --bootstrap
        docker info
      env:
        BINFMT_IMAGE: 'docker/binfmt:a7996909642ee92942dcd6cff44b9b95f08dad64'
        BUILDX_URL: 'https://github.com/docker/buildx/releases/download/v0.3.1/buildx-v0.3.1.linux-amd64'

    - name: Login Doker
      run: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
      env:
        DOCKER_USERNAME: yskszk63
        DOCKER_PASSWORD: ${{ secrets.DOCKER_TOKEN }}

    - name: Build and push
      run: |
        docker buildx build --platform "$PLATFORM" --push -t $DOCKER_REPO:latest .

    - name: Build and push with tag
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        TAG=${GITHUB_REF##*/}
        docker buildx build --platform "$PLATFORM" --push -t $DOCKER_REPO:$TAG .

# vim: set sw=2 ts=2 sts=2:
