name: build

on:
  push:
    paths-ignore:
    - 'support/*'
    - '.github/workflows/rustimg.yml'

jobs:
  check:
    runs-on: ubuntu-latest
    env:
      RUST_TEST_THREADS: 1
    steps:
    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y --no-install-recommends libudev-dev libinput-dev llvm libgoogle-perftools-dev

    - uses: actions/checkout@v2

    - name: Checkout submodules
      run: |
        git submodule sync --recursive
        git submodule update --init --recursive --depth 1

    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        profile: minimal
        components: rustfmt, clippy

    - name: Check format
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: -- --check

    - name: Annotate commit with clippy warnings
      uses: actions-rs/clippy-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        args: --all-features

    - name: Security audit
      uses: actions-rs/audit-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --no-fail-fast

  cov:
    runs-on: ubuntu-latest
    continue-on-error: true
    env:
      RUST_TEST_THREADS: 1
    steps:
    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y --no-install-recommends libudev-dev libinput-dev llvm libgoogle-perftools-dev

    - uses: actions/checkout@v2

    - name: Checkout submodules
      run: |
        git submodule sync --recursive
        git submodule update --init --recursive --depth 1

    - uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        override: true
        profile: minimal

    - name: Tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --no-fail-fast
      env:
        CARGO_INCREMENTAL: '0'
        RUSTFLAGS: '-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests'
        RUSTDOCFLAGS: '-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests'

    - id: coverage
      name: Coverage
      uses: actions-rs/grcov@v0.1

    - name: Upload coverage
      uses: codecov/codecov-action@v1
      with:
        file: ${{ steps.coverage.outputs.report }}

  build-image:
    runs-on: ubuntu-latest
    needs: check
    if: github.ref == 'refs/heads/master'
    strategy:
      matrix:
        arch:
        - amd64
        - arm32v5
        - arm32v7
    env:
      DOCKER_REPO: yskszk63/btknmle

    steps:
    - uses: actions/checkout@v2

    # work around for `Value too large for defined data type;`
    - name: Setup btrfs volume driver
      run: |
        sudo systemctl stop docker.service
        sudo fallocate -l10GB /mnt/docker.img
        sudo mkfs.btrfs /mnt/docker.img
        sudo mount -t btrfs /mnt/docker.img /var/lib/docker
        echo '{"storage-driver":"btrfs"}' | sudo tee /etc/docker/daemon.json > /dev/null
        sudo systemctl start docker.service

    - name: Setup binfmt
      run: |
        docker run --rm --privileged "$BINFMT_IMAGE"
      env:
        BINFMT_IMAGE: 'docker/binfmt:a7996909642ee92942dcd6cff44b9b95f08dad64'

    - name: Login Doker
      run: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
      env:
        DOCKER_USERNAME: yskszk63
        DOCKER_PASSWORD: ${{ secrets.DOCKER_TOKEN }}

    - name: Build and push
      run: |
        case "${{ matrix.arch }}" in
          "amd64")
            TARGETPLATFORM=linux/amd64
            ;;
          "arm32v7")
            TARGETPLATFORM=linux/arm/v7
            ;;
          "arm32v5")
            TARGETPLATFORM=linux/arm/v5
            ;;
        esac
        docker build \
          -t $DOCKER_REPO:$TARGETARCH \
          --build-arg TARGETPLATFORM=${TARGETPLATFORM} \
          .
        docker push $DOCKER_REPO:$TARGETARCH
      env:
        TARGETARCH: ${{ matrix.arch }}

    #- name: Build and push with tag
    #  if: startsWith(github.ref, 'refs/tags/')
    #  run: |
    #    TAG=${GITHUB_REF##*/}
    #    docker buildx build --platform "$PLATFORM" --push -t $DOCKER_REPO:$TAG .

  push-manifest:
    runs-on: ubuntu-latest
    needs: build-image
    if: github.ref == 'refs/heads/master'
    env:
      DOCKER_REPO: yskszk63/btknmle
      DOCKER_CLI_EXPERIMENTAL: enabled

    steps:
    - name: Login Doker
      run: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
      env:
        DOCKER_USERNAME: yskszk63
        DOCKER_PASSWORD: ${{ secrets.DOCKER_TOKEN }}

    - name: Create manifest
      run: |
        docker manifest create $DOCKER_REPO:latest \
          $DOCKER_REPO:amd64 \
          $DOCKER_REPO:arm32v7 \
          $DOCKER_REPO:arm32v5
        docker manifest annotate --variant v7 $DOCKER_REPO:latest $DOCKER_REPO:arm32v7
        docker manifest annotate --variant v5 $DOCKER_REPO:latest $DOCKER_REPO:arm32v5
        docker manifest push $DOCKER_REPO:latest
# vim: set sw=2 ts=2 sts=2:
