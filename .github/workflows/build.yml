name: build

on:
  push:

jobs:
  fmt:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y --no-install-recommends libudev-dev libinput-dev

    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        profile: minimal
        components: rustfmt

    - name: Cargo cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-rust_stable-${{ hashFiles('**/Cargo.toml') }}

    - name: Check format
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: -- --check


  clippy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y --no-install-recommends libudev-dev libinput-dev

    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        profile: minimal
        components: clippy

    - name: Cargo cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-rust_stable-${{ hashFiles('**/Cargo.toml') }}

    - name: Build cache
      uses: actions/cache@v2
      with:
        path: target
        key: ${{ runner.os }}-build-rust_stable-clippy-${{ hashFiles('**/Cargo.toml') }}

    - name: Annotate commit with clippy warnings
      uses: actions-rs/clippy-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        args: --all-features


  audit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y --no-install-recommends libudev-dev libinput-dev

    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        profile: minimal

    - name: Cargo cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-rust_stable-${{ hashFiles('**/Cargo.toml') }}

    - name: Build cache
      uses: actions/cache@v2
      with:
        path: target
        key: ${{ runner.os }}-build-rust_stable-audit-${{ hashFiles('**/Cargo.toml') }}

    - name: Security audit
      uses: actions-rs/audit-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}


  tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y --no-install-recommends libudev-dev libinput-dev

    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        profile: minimal

    - name: Cargo cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-rust_stable-${{ hashFiles('**/Cargo.toml') }}

    - name: Build cache
      uses: actions/cache@v2
      with:
        path: target
        key: ${{ runner.os }}-build-rust_stable-tests-${{ hashFiles('**/Cargo.toml') }}

    - name: Tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --no-fail-fast --workspace


  cov:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y --no-install-recommends libudev-dev libinput-dev

    - uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        override: true
        profile: minimal
        components: llvm-tools-preview

    - name: Cargo cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-rust_stable-${{ hashFiles('**/Cargo.toml') }}

    - name: Build cache
      uses: actions/cache@v2
      with:
        path: target
        key: ${{ runner.os }}-build-rust_stable-tests-${{ hashFiles('**/Cargo.toml') }}

    - name: Install cargo-llvm-cov
      run: curl -LsSf https://github.com/taiki-e/cargo-llvm-cov/releases/download/v0.1.0-alpha.4/cargo-llvm-cov-x86_64-unknown-linux-gnu.tar.gz | tar xzf - -C ~/.cargo/bin

    - name: Coverage
      uses: actions-rs/cargo@v1
      with:
        command: llvm-cov
        args: --all-features --workspace --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        files: lcov.info
        fail_ci_if_error: true


# It was helpful: https://github.com/Smithay/input.rs/blob/master/.github/workflows/ci.yml
  builds:
    strategy:
      matrix:
        target:
        - x86_64-unknown-linux-gnu
        - arm-unknown-linux-gnueabihf
        - armv7-unknown-linux-gnueabihf
        - aarch64-unknown-linux-gnu
        #- i686-unknown-linux-gnu
    runs-on: ubuntu-latest
    container: ubuntu:focal
    steps:
    - uses: actions/checkout@v2
    - run: |
        TZ=Etc/UTC
        ln -snf /usr/share/zoneinfo/${TZ} /etc/localtime
        echo ${TZ} > /etc/timezone
        apt-get update -qqy
        apt-get install -qqy sudo curl gcc pkg-config libclang-dev dpkg-dev
    - name: Setup linux toolchain
      if: ${{ contains(matrix.target, '-linux-') && startsWith(matrix.target, 'x86_64-') }}
      run: |
        sudo apt-get install -qqy libinput-dev
    - name: Setup cross linux toolchain
      if: ${{ contains(matrix.target, '-linux-') && !startsWith(matrix.target, 'x86_64-') }}
      run: |
        case "${{ matrix.target }}" in
          i686-*) SYSTEM_ARCH=i386 ;;
          arm*) SYSTEM_ARCH=armhf ;;
          aarch64*) SYSTEM_ARCH=arm64 ;;
        esac
        GCC_TARGET=$(printf "${{ matrix.target }}" | sed 's/-unknown-/-/' | sed 's/arm[^-]*/arm/g')
        ENV_TARGET=$(printf "${{ matrix.target }}" | tr '-' '_')
        ENV_TARGET_UC=$(printf "${ENV_TARGET}" | tr '[[:lower:]]' '[[:upper:]]')
        sudo rm -f /etc/apt/sources.list.d/*.list
        case "${{ matrix.target }}" in
          arm* | aarch64*)
        sudo tee /etc/apt/sources.list << EOF
        deb [arch=i386,amd64] http://archive.ubuntu.com/ubuntu/ focal main universe
        deb [arch=i386,amd64] http://archive.ubuntu.com/ubuntu/ focal-updates main universe
        deb [arch=i386,amd64] http://security.ubuntu.com/ubuntu/ focal-security main universe
        deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports/ focal main universe
        deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports/ focal-updates main universe
        deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports/ focal-security main universe
        EOF
            ;;
        esac
        sudo dpkg --add-architecture ${SYSTEM_ARCH}
        dpkg --print-foreign-architectures
        sudo apt-get update -qqy
        sudo apt-get dist-upgrade -qqy --fix-broken
        sudo apt-get install -qqy --fix-broken -o Debug::pkgProblemResolver=yes libinput-dev:${SYSTEM_ARCH} gcc-${GCC_TARGET} pkg-config-${GCC_TARGET}
        echo "CARGO_TARGET_${ENV_TARGET_UC}_LINKER=${GCC_TARGET}-gcc" >> $GITHUB_ENV
        echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
        echo "PKG_CONFIG_${ENV_TARGET}=${GCC_TARGET}-pkg-config" >> $GITHUB_ENV
        echo "PKG_CONFIG=${GCC_TARGET}-pkg-config" >> $GITHUB_ENV
        echo "BINDGEN_EXTRA_CLANG_ARGS=\"-L/usr/lib/${GCC_TARGET} -L/lib/${GCC_TARGET}\"" >> $GITHUB_ENV
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        profile: minimal
        default: true
        override: true
    - name: Cargo cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-rust_stable-${{ hashFiles('**/Cargo.toml') }}
    - name: Build cache
      uses: actions/cache@v2
      with:
        path: target
        key: ${{ runner.os }}-build-rust_stable-target_${{ matrix.target }}-${{ hashFiles('**/Cargo.toml') }}
    - name: Update deps
      uses: actions-rs/cargo@v1
      with:
        command: update
    - name: Build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --target ${{ matrix.target }}
    - name: Upload builds
      uses: actions/upload-artifact@v2
      with:
        name: btknmle-${{ matrix.target }}
        path: |
          target/release/btknmle

### -----
#  build-image:
#    runs-on: ubuntu-latest
#    needs: check
#    if: contains(github.ref, 'tags/v')
#    strategy:
#      matrix:
#        include:
#        - arch: amd64
#          target: x86_64-unknown-linux-gnu
#          docker: linux/amd64
#        - arch: arm32v6
#          target: arm-unknown-linux-gnueabihf
#          docker: '-'
#        - arch: arm32v7
#          target: armv7-unknown-linux-gnueabihf
#          docker: linux/arm/v7
#    env:
#      DOCKER_REPO: yskszk63/btknmle
#      ver: 0.1.0
#
#    steps:
#    - uses: actions/checkout@v2
#
#    - name: Checkout submodules
#      run: |
#        git submodule sync --recursive
#        git submodule update --init --recursive --depth 1
#
#    - name: Install toolchain
#      run: |
#        case "${{ matrix.arch }}" in
#          arm32v6 )
#            git clone --depth 1 'https://github.com/raspberrypi/tools.git' ~/tools
#            cat << EOF > ~/.cargo/config
#        [target.arm-unknown-linux-gnueabihf]
#        linker = "arm-linux-gnueabihf-gcc"
#        EOF
#            echo "$HOME/tools/arm-bcm2708/arm-linux-gnueabihf/bin" >> $GITHUB_PATH
#            ;;
#
#          arm32v7 )
#            sudo apt install gcc-arm-linux-gnueabihf
#            cat << EOF > ~/.cargo/config
#        [target.armv7-unknown-linux-gnueabihf]
#        linker = "arm-linux-gnueabihf-gcc"
#        EOF
#            ;;
#        esac
#
#    - uses: actions-rs/toolchain@v1
#      with:
#          toolchain: stable
#          target: ${{ matrix.target }}
#          override: true
#          profile: minimal
#
#    - name: Build
#      uses: actions-rs/cargo@v1
#      with:
#        command: build
#        args: --release --target ${{ matrix.target }}
#
#    - name: Make deb pakcage
#      run: |
#        base=$(mktemp -d)
#        trap "rm -vrf $base" EXIT
#
#        install -Dm755 target/$target/release/$binname $base/usr/bin/$binname
#        mkdir $base/DEBIAN
#        cat > $base/DEBIAN/control << EOF
#        Package: $binname
#        Version: $ver
#        Section: utils
#        Priority: optional
#        Maintainer: yskszk63 <yskszk63@gmail.com>
#        Architecture: $arch
#        Provides: $binname
#        Depends: libinput10
#        Description: Expose local keyboard and mouse as Bluetooth HID device.
#        EOF
#
#        fakeroot dpkg-deb --build $base ${binname}_$arch.deb
#      env:
#        target: ${{ matrix.target }}
#        arch: ${{ matrix.arch }}
#        binname: btknmle
#
#    - uses: actions/upload-artifact@v2
#      with:
#        name: ${{ matrix.target }}
#        path: '*.deb'
#
#    - name: Setup binfmt
#      run: |
#        docker run --rm --privileged "$BINFMT_IMAGE"
#      env:
#        BINFMT_IMAGE: 'docker/binfmt:a7996909642ee92942dcd6cff44b9b95f08dad64'
#
#    - name: Login Doker
#      run: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
#      env:
#        DOCKER_USERNAME: yskszk63
#        DOCKER_PASSWORD: ${{ secrets.DOCKER_TOKEN }}
#
#    - name: Build and push
#      if: matrix.docker != '-'
#      run: |
#        cp target/${{ matrix.target }}/release/btknmle target/
#        docker build \
#          -t $DOCKER_REPO:$TARGETARCH \
#          --build-arg TARGETPLATFORM=${TARGETPLATFORM} \
#          .
#        docker push $DOCKER_REPO:$TARGETARCH
#      env:
#        TARGETARCH: ${{ matrix.arch }}
#        TARGETPLATFORM: ${{ matrix.docker }}
#
#  push-manifest:
#    runs-on: ubuntu-latest
#    needs: build-image
#    if: contains(github.ref, 'tags/v')
#    env:
#      DOCKER_REPO: yskszk63/btknmle
#      DOCKER_CLI_EXPERIMENTAL: enabled
#
#    steps:
#    - name: Login Doker
#      run: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
#      env:
#        DOCKER_USERNAME: yskszk63
#        DOCKER_PASSWORD: ${{ secrets.DOCKER_TOKEN }}
#
#    - name: Create manifest
#      run: |
#        docker manifest create $DOCKER_REPO:latest \
#          $DOCKER_REPO:amd64 \
#          $DOCKER_REPO:arm32v7
#        docker manifest annotate --variant v7 $DOCKER_REPO:latest $DOCKER_REPO:arm32v7
#        docker manifest push $DOCKER_REPO:latest
#
#    - uses: actions/download-artifact@v2
#    - run: find . -type f
#
#    - id: create_release
#      uses: actions/create-release@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        tag_name: ${{ github.ref }}
#        release_name: Release ${{ github.ref }}
#        draft: true
#
#    - uses: actions/upload-release-asset@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        upload_url: ${{ steps.create_release.outputs.upload_url }}
#        asset_path: ./x86_64-unknown-linux-gnu/btknmle_amd64.deb
#        asset_name: btknmle_0.1.0_amd64.deb
#        asset_content_type: application/octet-stream
#
#    - uses: actions/upload-release-asset@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        upload_url: ${{ steps.create_release.outputs.upload_url }}
#        asset_path: ./armv7-unknown-linux-gnueabihf/btknmle_arm32v7.deb
#        asset_name: btknmle_0.1.0_arm32v7.deb
#        asset_content_type: application/octet-stream
#
#    - uses: actions/upload-release-asset@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        upload_url: ${{ steps.create_release.outputs.upload_url }}
#        asset_path: ./arm-unknown-linux-gnueabihf/btknmle_arm32v6.deb
#        asset_name: btknmle_0.1.0_arm32v6.deb
#        asset_content_type: application/octet-stream
# vim: set sw=2 ts=2 sts=2:
